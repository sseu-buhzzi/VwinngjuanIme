#!/usr/bin/env python3
import collections.abc
import json
import os
import re
import shutil
import time
import xml.etree.ElementTree

def ansi_format(style: str, format: str, *args, **kwargs):
	return "\x1b[{}m{}\x1b[0m".format(style, format).format(*args, **kwargs)

def apply_colors(path: str, replaced_colors: dict[str, str], parse_xml: bool):
	if parse_xml:
		tree = xml.etree.ElementTree.parse(path)
		root = tree.getroot()

		for elem in root.iter():
			fill_color = elem.attrib.get("fill", None)
			if fill_color is None: continue
			fill_color = fill_color.lower()
			replaced_color = replaced_colors.get(fill_color, None)
			if replaced_color is None: continue
			elem.attrib["fill"] = replaced_color
			print("Replaced color {} with {}".format(ansi_format("36", "{}", fill_color), ansi_format("36", "{}", replaced_color)))

		tree.write(path, encoding = "utf-8")
		print("Wrote to {}".format(ansi_format("36", "{}", path)))
	else:
		with open(path) as f:
			content = f.read()
		for src_color, dst_color in replaced_colors.items():
			content = content.replace(src_color, dst_color)
			print("Replaced color {} with {}".format(ansi_format("36", "{}", src_color), ansi_format("36", "{}", dst_color)))
		with open(path, "w") as f:
			f.write(content)

def get_ignores():
	with open("import_material_ignores.json") as f:
		return set(json.load(f))

def put_ignores(ignores: collections.abc.Iterable[str]):
	with open("import_material_ignores.json", "w") as f:
		json.dump(list(ignores), f, indent = "\t")

os.chdir(os.path.dirname(__file__))

src_dir = os.path.expanduser("~/Downloads")
available_names = [name for name in os.listdir(src_dir) if re.match(r"^\w+\.svg$", name)]
ignored_names = get_ignores()
print("Available names:\n" + "\n".join(
	ansi_format("30", "{}\t{}", i, name) if name in ignored_names
	else "{}\t{}".format(i, name)
for i, name in enumerate(available_names)))
try:
	src_name_in_default = [name for name in available_names if name not in ignored_names][0]
except IndexError:
	src_name_in_default = None
src_name_in = input("Source name or index ({}): ".format(
	ansi_format("30", "None") if src_name_in_default is None
	else ansi_format("33", "{}", src_name_in_default)
)) or src_name_in_default
assert src_name_in is not None, "No available names, exiting"
src_name = available_names[int(src_name_in)] if src_name_in.isdigit() else src_name_in
print(ansi_format("32", src_name))

dst_dir = os.path.abspath("app/src/main/res/drawable")
dst_name_in_default = "material_{}".format(re.sub(r"_?\d+dp\w+\.svg$", ".xml", src_name).lower())
dst_name_in = input("Destination name ({}): ".format(ansi_format("33", "{}", dst_name_in_default))) or dst_name_in_default
dst_name = dst_name_in if dst_name_in.endswith(".xml") else dst_name_in + ".xml"
print(ansi_format("32", dst_name))

matched = re.search(r"(?<=dp_)[\wA-F]{6}", src_name)
src_color_default = "#ffffff" if matched is None else "#" + matched.group().lower()
src_color = input("Source color (\x1b[33m{}\x1b[0m): ".format(src_color_default)) or src_color_default
print(ansi_format("32", src_color))

available_colors = [
	"@color/colorForeground",
	"?attr/colorPrimary"
]
print("Available colors:\n" + "\n".join("{}\t{}".format(i, color) for i, color in enumerate(available_colors)))
dst_color_in_default = available_colors[0]
dst_color_in = input("Destination color or index ({}): ".format(ansi_format("33", "{}", dst_color_in_default))) or dst_color_in_default
dst_color = available_colors[int(dst_color_in)] if dst_color_in.isdigit() else dst_color_in
print(ansi_format("32", dst_color))

src_path = os.path.join(src_dir, src_name)
tmp_path = os.path.join("/tmp", dst_name.replace(".xml", ".svg"))
dst_path = os.path.join(dst_dir, dst_name)

shutil.copy(src_path, tmp_path)
print("Temporary copied {} to {}".format(ansi_format("36", src_name), ansi_format("36", dst_name)))

print(end = "Import it in Android Studio, then this script will continue")
try:
	while not os.path.exists(dst_path):
		print(end = ".", flush = True)
		time.sleep(1)
	print("\nDetected {}, continuing".format(ansi_format("36", dst_path)))

	apply_colors(os.path.join(dst_dir, dst_name), {src_color: "@color/colorForeground"}, False)

	ignored_names.add(src_name)
	put_ignores(ignored_names)
finally:
	os.remove(tmp_path)
	print("Removed temporary {}".format(ansi_format("36", dst_name)))
